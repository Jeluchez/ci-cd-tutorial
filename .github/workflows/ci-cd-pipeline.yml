name: CI/CD Pipeline

on:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1

jobs:
  registry:
    runs-on: ubuntu-latest
    outputs:
      repository-name: ${{ steps.create-registry.outputs.repository-name }}
    steps:
      - name: Check Out
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Create ECR
        id: create-registry
        run: |
          cd terraform/registry/

          terraform init \
          -backend-config=config/backend-config.tf \
          -reconfigure \
          -input=false

          terraform apply \
          -var-file=vars.tfvars \
          -input=false \
          -auto-approve
          export REPOSITORY_NAME=$(terraform output --raw repository_name)
          echo "repository_name=$REPOSITORY_NAME" >> $GITHUB_ENV"    
  docker-build:
    runs-on: ubuntu-latest
    needs: [registry] 
    env:
      REPOSITORY_NAME: "${{ env.repository_name }}"
      ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
    steps:
    - name: Check Out
      uses: actions/checkout@v3
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.repository_name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    - name: Image build and push
      id: docker-build
      run: |
        export FULL_NAME_IMAGE=${{ steps.meta.outputs.tags }}
        export IMAGE_TAG=${{ steps.meta.outputs.tags }}
        echo "$FULL_NAME_IMAGE"

        export ACCOUNT_ID=$(aws sts get-caller-identity | jq -r .Account)
        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
        export REPOSITORY_URL=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/
        
        docker build --platform linux/amd64 -t ${FULL_NAME_IMAGE} .
        docker tag ${FULL_NAME_IMAGE} ${REPOSITORY_URL}${FULL_NAME_IMAGE}
        docker push ${REPOSITORY_URL}${FULL_NAME_IMAGE}
